{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","className","this","props","todos","map","todo","classNames","completed","htmlFor","checked","type","readOnly","title","userId","selectedUserId","onClick","handelSelectUser","id","React","Component","url","getTodos","a","fetch","response","json","getUser","CurrentUser","user","loadData","prevProps","then","userFromServer","setState","name","email","phone","handleClear","App","selectFilterValue","inputValue","handelSelect","event","value","target","handleChangeInput","filterByInput","filterTodos","filteredTodos","filter","toLowerCase","includes","toLocaleLowerCase","loadUser","todosFromServer","onChange","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3dda7d02.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\n\ntype Props = {\n  handelSelectUser: (userId: number) => void;\n  selectedUserId: number;\n  todos: Todo[];\n};\n\nexport class TodoList extends React.Component<Props, {}> {\n  state = {\n  };\n\n  render(): React.ReactNode {\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.props.todos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label htmlFor=\"searchInput\">\n                  <input\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames('TodoList__user-button', 'button', {\n                    'TodoList__user-button--selected': todo.userId === this.props.selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => {\n                    this.props.handelSelectUser(todo.userId);\n                  }}\n                >\n                  {`User #${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n\n    );\n  }\n}\n","const url = 'https://mate.academy/students-api';\n\nexport const getTodos = async (): Promise<Todo[]> => {\n  const response = await fetch(`${url}/todos`);\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number): Promise<User> => {\n  const response = await fetch(`${url}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number;\n  handelSelectUser: (userId: number) => void;\n  handleClear: () => void;\n};\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    this.loadData();\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.loadData();\n    }\n  }\n\n  loadData() {\n    getUser(this.props.selectedUserId)\n      .then(userFromServer => {\n        this.setState({\n          user: userFromServer,\n        });\n      });\n  }\n\n  render(): React.ReactNode {\n    const { user } = this.state;\n\n    if (!user) {\n      return (\n        <span>...Waiting</span>\n      );\n    }\n\n    return (\n      <>\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\"><span>{`Selected user: ${this.props.selectedUserId}`}</span></h2>\n\n          <h3 className=\"CurrentUser__name\">{user.name}</h3>\n          <p className=\"CurrentUser__email\">{user.email}</p>\n          <p className=\"CurrentUser__phone\">{user.phone}</p>\n        </div>\n        <button\n          type=\"button\"\n          onClick={() => {\n            this.props.handleClear();\n          }}\n        >\n          Clear\n        </button>\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  selectFilterValue: string;\n  inputValue: string;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    selectFilterValue: '',\n    inputValue: '',\n  };\n\n  componentDidMount() {\n    this.loadUser();\n  }\n\n  componentDidUpdate(prevProps: State) {\n    if (prevProps.selectedUserId !== this.state.selectedUserId) {\n      this.loadUser();\n    }\n  }\n\n  handelSelectUser = (userId: number) => {\n    if (userId !== this.state.selectedUserId) {\n      this.setState({\n        selectedUserId: userId,\n      });\n    }\n  };\n\n  handelSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      selectFilterValue: value,\n    });\n  };\n\n  handleClear = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  handleChangeInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    this.setState({\n      inputValue: value,\n    });\n\n    this.filterByInput(this.state.inputValue);\n  };\n\n  filterTodos = (): Todo[] => {\n    const { todos, selectFilterValue, inputValue } = this.state;\n    let filteredTodos;\n\n    switch (selectFilterValue) {\n      case 'active':\n        filteredTodos = todos.filter(todo => !todo.completed);\n        break;\n\n      case 'completed':\n        filteredTodos = todos.filter(todo => todo.completed);\n        break;\n\n      default:\n        filteredTodos = [...todos];\n    }\n\n    return filteredTodos.filter(todo => (\n      todo.title.toLowerCase().includes(inputValue.toLocaleLowerCase())\n    ));\n  };\n\n  filterByInput = (inputValue: string) => {\n    this.setState(state => ({\n      ...state,\n      todos: [...state.todos.filter(todo => todo.title.includes(inputValue))],\n    }));\n  };\n\n  loadUser() {\n    getTodos()\n      .then(todosFromServer => {\n        this.setState({\n          todos: [...todosFromServer],\n        });\n      });\n  }\n\n  render() {\n    const {\n      selectedUserId,\n      selectFilterValue,\n      inputValue,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <select\n            value={selectFilterValue}\n            onChange={this.handelSelect}\n          >\n            <option value=\"all\">all</option>\n            <option value=\"active\">active</option>\n            <option value=\"completed\">completed</option>\n          </select>\n          <br />\n          <input\n            onChange={this.handleChangeInput}\n            value={inputValue}\n            type=\"text\"\n          />\n          <TodoList\n            handelSelectUser={this.handelSelectUser}\n            selectedUserId={selectedUserId}\n            todos={this.filterTodos()}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                handleClear={this.handleClear}\n                selectedUserId={selectedUserId}\n                handelSelectUser={this.handelSelectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}